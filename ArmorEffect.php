
<? php espace de noms kirua122 \ ArmorEffect; 
utilisez pocketmine \ entity \ Effect; utilisez pocketmine \ entity \ EffectInstance; 
utilisez pocketmine \ event \ entity \ EntityArmorChangeEvent; 
utilisez pocketmine \ Player; 
utilisez pocketmine \ plugin \ PluginBase; utilisez pocketmine \ event \ Listener; utilisez pocketmine \ utils \ Config; classe ArmorEffect étend PluginBase implémente Listener 
{ 
$config privé; / ** * @param mixed $config * / fonction publique setData(Config $config): void {$this->config = $config; } fonction publique getData (): Config {retourner $this-> config; } fonction publique onEnable() {$this->getServer() -> getPluginManager() -> registerEvents ($this,$this); @mkdir ($this->getDataFolder()); if (!file_exists ($this->getDataFolder()."config.yml")) {$this->saveResource('config.yml');}$$this->setData (new Config ($this-> getDataFolder().'config.yml', Config :: YAML));}fonction publique onArmor
(événement EntityArmorChangeEvent$) {$player = $event->getEntity(); if ($player instanceof Player) {$new =
$event-> getNewItem (); $old =$event-> getOldItem (); $configs = $this-> getData () ->getAll(); $ids = array_keys ($configs); if (in_array ($new->getId(),$ids)) {$array = $this->getData () ->getAll () [$new-> getId ()]; if ($array ["message"]! = null) { $ player-> sendMessage ($ array ["message"]); } $ effects = $ array ["effect"]; foreach ($ effects as $ effectid => $ arrayeffect) { $ eff = new EffectInstance ( Effect :: getEffect ($ effectid), 9999999 * 20, (int) $ arrayeffect ["amplificateur"], (bool) $ arrayeffect ["visible"] ); $ player-> addEffect ($ eff); } } else if (in_array ($ old-> getId (), $ ids)) { $ array = $ this-> getData () -> getAll () [$ old-> getId ()];$ ids)) { $ array = $ this-> getData () -> getAll () [$ new-> getId ()]; if ($ array ["message"]! = null) { $ player-> sendMessage ($ array ["message"]); } $ effects = $ array ["effect"]; foreach ($ effects as $ effectid => $ arrayeffect) { $ eff = new EffectInstance ( Effect :: getEffect ($ effectid), 9999999 * 20, (int) $ arrayeffect ["amplificateur"], (bool) $ arrayeffect ["visible"] ); $ player-> addEffect ($ eff); } } else if (in_array ($ old-> getId (), $ ids)) { $ array = $ this-> getData () -> getAll () [$ old-> getId ()]; $ effects = $ array ["effect"]; foreach ($ effects as $ effectid => $ arrayeffect) { $ player-> removeEffect ($ effectid); } } } } }
